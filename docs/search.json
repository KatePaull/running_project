[
  {
    "objectID": "running.html",
    "href": "running.html",
    "title": "Seattle Half Marathon Training: November 26, 2023",
    "section": "",
    "text": "Code\n#chunk purpose: web scrape a running inspirational quote page and randomly select one quote to display in the half marathon Quarto file\n\npacman::p_load(chron, ggrepel, ggwordcloud, gridExtra, kableExtra, knitr, rvest, tidyverse)\n\ninspiration_html &lt;- read_html(\"https://www.runnersathletics.com/blogs/news/270-motivational-inspirational-and-funny-running-quotes?kw=&campid=20397210215&adgroup=&extension=&creative=&tw_source=google&tw_adid=&tw_campaign=20397210215&gclid=EAIaIQobChMIodi2ha_fgAMVIiCtBh2UEQwyEAAYAyAAEgJ54fD_BwE\")\n\ninspiration &lt;- as.data.frame(inspiration_html %&gt;%\n  html_elements(\"li\") %&gt;%\n  html_elements(\"span\") %&gt;%\n  html_text2()) %&gt;% \n  rename(quote = 1) %&gt;% \n  filter(str_detect(quote, \" \")) %&gt;% #remove non-quote lines\n  sample_n(1) #randomly select 1 quote to display each time rendered\n\nrm(inspiration_html)\n“Look in the mirror. That is your competition.” – Unknown Runner"
  },
  {
    "objectID": "running.html#training-schedule",
    "href": "running.html#training-schedule",
    "title": "Seattle Half Marathon Training: November 26, 2023",
    "section": "Training Schedule",
    "text": "Training Schedule\n\n\nCode\n#chunk purpose: web scrape half marathon training schedule to know how far to run each day, make kable table to display schedule in Quarto\n\ntraining_plan_html &lt;- read_html(\"https://www.halfmarathons.net/14-week-half-marathon-training-schedule/\")\n\ntraining_schedule &lt;- as.data.frame(\n  training_plan_html %&gt;% \n  html_elements(\".table-responsive\") %&gt;%\n  html_table()\n) %&gt;% \n  select(9:16) #1:8 not needed, related to alternative training schedule\n\n#need to remove text from vars, pivot longer for tidy format\n\n#rename vars: remove \".1\" and conform to lower case\nnames(training_schedule) &lt;- tolower(gsub(pattern = \".1\", replacement = \"\", x = names(training_schedule)))\n\n#remove text from variables and replace NA with 0 to indicate 0 miles to run that day\nparse &lt;- function(x) (parse_number(x)) #remove text\ncoal &lt;- function(x) (coalesce(x, 0)) # NA -&gt; 0\n\ntraining_schedule &lt;- training_schedule %&gt;%        \n  mutate_at(2:8, ~str_replace(., \"off\", \"0\") %&gt;% \n              parse %&gt;% \n              coalesce) %&gt;% \n  mutate(sun = round(sun, 0)) #round last entry, 13.1 miles, to 0 decimals for display preferences\n\n#duplicate data frame to have one in wide format for display and one long format for data analysis\ntraining_schedule_for_kable &lt;- training_schedule %&gt;%\n  rename_with(str_to_title)\n\n#pivot longer so all runs are in one column (elim cols for each weekday)\n#long format used to assign dates to each run; 1st date of each week will then be added to wide format for kable display\ntraining_schedule &lt;- training_schedule %&gt;%\n  pivot_longer(\n    cols = !week, \n    names_to = \"weekday\", \n    values_to = \"distance\"\n  )\n\n#Assign dates to each run for tracking\nstart_date &lt;- as.Date(\"2023/08/07\") #1st day of training\n\ntraining_schedule_length &lt;- as.numeric(nrow(training_schedule)) #number of days in training schedule\n\ntraining_schedule &lt;- training_schedule %&gt;% \n  mutate(date = seq(start_date, by = \"day\", length.out = training_schedule_length)) %&gt;% \n  relocate(date, .before = week)\n\n#add week start date for display purposes\ntraining_schedule_week_start &lt;- training_schedule %&gt;%\n  select(week, date) %&gt;% \n  group_by(week) %&gt;% \n  slice_head() %&gt;% \n  rename_with(str_to_title) %&gt;% #capitalize for left_join\n  ungroup()\n\ntraining_schedule_for_kable &lt;- left_join(training_schedule_for_kable, training_schedule_week_start, by = \"Week\") %&gt;% \n  relocate(Date, .after = \"Week\")\n                     \n#generate kable schedule with strike-outs for weeks that have passed\nkable_training_schedule &lt;- kable(training_schedule_for_kable, \"html\", col.names = c(\"Week Number\", \"Week of\", \"Mon Miles\", \"Tues Miles\", \"Weds Miles\", \"Thurs Miles\", \"Fri Miles\", \"Sat Miles\", \"Sun Miles\")) %&gt;% \n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"), position = \"left\") \n\nrm(training_plan_html, start_date)\n\nkable_training_schedule\n\n\n\n\n\nWeek Number\nWeek of\nMon Miles\nTues Miles\nWeds Miles\nThurs Miles\nFri Miles\nSat Miles\nSun Miles\n\n\n\n\n1\n2023-08-07\n0\n3\n0\n3\n0\n3\n3\n\n\n2\n2023-08-14\n0\n3\n0\n3\n0\n3\n4\n\n\n3\n2023-08-21\n0\n3\n4\n3\n0\n3\n4\n\n\n4\n2023-08-28\n0\n3\n4\n3\n0\n3\n5\n\n\n5\n2023-09-04\n0\n4\n5\n4\n0\n3\n5\n\n\n6\n2023-09-11\n0\n4\n5\n4\n0\n3\n6\n\n\n7\n2023-09-18\n0\n4\n6\n4\n0\n4\n7\n\n\n8\n2023-09-25\n0\n4\n6\n4\n0\n4\n8\n\n\n9\n2023-10-02\n0\n5\n6\n5\n0\n3\n9\n\n\n10\n2023-10-09\n0\n5\n7\n5\n0\n3\n10\n\n\n11\n2023-10-16\n0\n5\n6\n5\n0\n3\n11\n\n\n12\n2023-10-23\n0\n5\n6\n4\n0\n3\n12\n\n\n13\n2023-10-30\n0\n5\n5\n3\n0\n2\n6\n\n\n14\n2023-11-06\n0\n3\n5\n3\n0\n2\n13"
  },
  {
    "objectID": "running.html#monthly-averages",
    "href": "running.html#monthly-averages",
    "title": "Seattle Half Marathon Training: November 26, 2023",
    "section": "Monthly Averages",
    "text": "Monthly Averages\n\n\nCode\n#chunk purpose: import run data from Fitbit for data analytics\n\nruns_completed &lt;- read_csv(\"./rundata.csv\", show_col_types = FALSE)#Fitbit data on exercise this year\n\n#\"Date\" is chr type and has month, day, time but no year\n#\"Run\" and \"Run Edit\" are the only obs of interest within \"Activities\" var\n#need to eliminate commas and chars in steps, cals, distance; make numeric\n\nruns_completed &lt;- janitor::clean_names(runs_completed) #lower case var names\n\nruns_completed &lt;- runs_completed %&gt;%\n  filter(activity == \"Run\" | activity == \"Run Edit\") %&gt;% #remove hikes, bikes, etc.\n  select(-activity) %&gt;% #column no longer needed\n  filter(calories != \"0 cals\") %&gt;% #remove tracking errors\n  separate_wider_delim(date, \", \", names = c(\"month_day\", \"time\")) %&gt;% #split date/time\n  mutate(year = as.character(2023), #year not included in source data\n         datetime = strptime(paste(month_day, year, time, sep = \" \"), format = \"%b %e %Y %I:%M %p\", tz = \"GMT\")\n         ) #generate dttm format\n\n#remove unnecessary variables, reorder cols\nruns_completed &lt;- runs_completed %&gt;%\n  select(-month_day, -year, -time) %&gt;%\n  relocate(datetime)\n\nruns_completed &lt;- runs_completed %&gt;% mutate_at(c(\"calories\", \"distance\", \"steps\"), parse) %&gt;% #remove characters to generate numeric types\n  rename(distance_miles = distance)\n\n#fix duration format: runs &gt; 1h are HH:MM:SS format but runs &lt; 1h are MM:SS:00 format -&gt; make all obs HH:MM:SS by modifying runs &lt;1h: trim right \":00\" then add left \"00:\" to indicate 0 hours\n\n#first make duration char type temporarily for str_sub trim and paste, then convert back to time format at end\n#locate obs ending in :00, which are runs under 1h -&gt; select characters 1 - 5, which consist of MM:SS and paste HH of \"00:\" to left side for HH:MM:SS format\n\nruns_completed &lt;- runs_completed %&gt;%\n  mutate(\n    duration_time = as.times(if_else(\n      str_detect(as.character(duration), \":00$\"),\n      paste(\"00:\", str_sub(as.character(duration), 1, 5), sep = \"\"),\n      as.character(duration)))) %&gt;% #leave runs &gt; 1h alone\n  select(-duration)\n\n#keep duration_time as \"time\" class for future averages calcs, but also make duration_period as period class so format is proper for ggplots\nruns_completed &lt;- runs_completed %&gt;% \n   mutate(\n     duration_period  =  period(\n       hours   = str_sub(duration_time, 1, 2),\n       minutes = str_sub(duration_time, 4, 5),\n       seconds = str_sub(duration_time, 7, 8)),\n     avg_time = as.period(as.duration(duration_period)/distance_miles)) %&gt;%\n  relocate(duration_period, avg_time, .after = duration_time)\n\n#make month factor and make variables of interest for subsequent ggplots\nruns_completed &lt;- runs_completed %&gt;%\n  mutate(month = factor(month.abb[month(datetime)], levels = month.abb)) %&gt;%\n  relocate(month, .after = datetime) %&gt;%\n  group_by(month) %&gt;%\n mutate(\n  avg_mile = duration_time/distance_miles,\n  monthly_avg_mile = mean(duration_time/distance_miles)\n  ) %&gt;% \n  ungroup()\n\n#calculate summary stats for meaningful variables and display in table\nstats_for_kable &lt;- runs_completed %&gt;% \n  select(month, distance_miles, monthly_avg_mile) %&gt;% \n  group_by(month) %&gt;% \n  summarise_all(~mean(.x, na.rm = TRUE)) %&gt;% \n  mutate(distance_miles = round(distance_miles, 2)) %&gt;% \n  ungroup()\n\nkable_stats &lt;- kable(stats_for_kable, \"html\",  col.names = c(\"Month\", \"Miles\", \"Mile Time\")) %&gt;% \n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\nkable_stats\n\n\n\n\n\nMonth\nMiles\nMile Time\n\n\n\n\nJan\n3.59\n00:10:34\n\n\nFeb\n3.93\n00:10:52\n\n\nMar\n2.44\n00:09:47\n\n\nApr\n3.13\n00:10:44\n\n\nMay\n2.41\n00:09:49\n\n\nJun\n3.48\n00:10:28\n\n\nJul\n3.69\n00:10:34\n\n\nAug\n3.32\n00:09:38\n\n\nSep\n4.52\n00:10:34\n\n\nOct\n5.89\n00:10:11\n\n\nNov\n4.28\n00:09:27\n\n\nDec\n3.74\n00:10:08"
  },
  {
    "objectID": "running.html#trends",
    "href": "running.html#trends",
    "title": "Seattle Half Marathon Training: November 26, 2023",
    "section": "Trends",
    "text": "Trends\n\n\nCode\n#Make barplot of runs per month\nbarplot_runs_per_month &lt;- runs_completed %&gt;%\n  group_by(month) %&gt;% \n  summarize(monthly_runs = n()) %&gt;%\n  ggplot(aes(month, monthly_runs, fill = month)) +\n  geom_bar(stat = \"identity\") +\n  theme_classic() +\n  scale_fill_brewer(palette = \"Paired\") +\n  labs(title = \"Runs per Month\", x = \"Month\", y = \"Number of Runs\") +\n  theme(\n    plot.title = element_text(size = 20, hjust = 0.5),\n    axis.title = element_text(size = 17),\n    axis.text = element_text(size = 15, color = \"black\")\n  ) + \n  guides(fill = \"none\") +\n  geom_text(aes(label = monthly_runs),\n    size = 4, hjust = \"center\", vjust = \"bottom\", nudge_y = 0.5\n  )\n\n#Make barplot of run distance by month\nbarplot_distance_per_month &lt;- runs_completed %&gt;%\n  group_by(month) %&gt;% \n  summarize(monthly_dist = sum(distance_miles)) %&gt;%\n  ggplot(aes(month, monthly_dist, fill = month)) +\n  geom_bar(stat = \"identity\") +\n  theme_classic() +\n  scale_fill_brewer(palette = \"Paired\") +\n  labs(title = \"Total Miles per Month\",\n       x = \"Month\",\n       y = \"Total Miles Run\")  +\n  theme(\n    plot.title = element_text(size = 20, hjust = 0.5),\n    axis.title = element_text(size = 17),\n    axis.text = element_text(size = 15, color = \"black\")\n  ) +\n  guides(fill = \"none\") +\n  geom_text(\n    aes(label = monthly_dist),\n    size = 4,\n    hjust = \"center\",\n    vjust = \"bottom\",\n    nudge_y = 1\n  )\n\n\n\nRuns per MonthDistance per Month\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nboxplot_duration &lt;- ggplot(runs_completed, aes(month, duration_period, color = month)) +\n  geom_boxplot() +\n  guides(color = \"none\") +\n  theme_classic() +\n  scale_color_brewer(palette = \"Paired\") +\n  scale_y_time() +\n  labs(\n    title = \"Duration by Month\",\n    x = NULL,\n    y = \"Run Duration \\n(HH:MM:SS)\") +\n  theme(\n    plot.title = element_text(size = 20, hjust = 0.5),\n    axis.title = element_text(size = 15),\n    axis.text = element_text(size = 10, color = \"black\")\n  )\n\nboxplot_distance &lt;- ggplot(runs_completed, aes(month, distance_miles, color = month)) +\n  geom_boxplot() +\n  guides(color = \"none\") +\n  theme_classic() +\n  scale_color_brewer(palette = \"Paired\") +\n  labs(\n    title = \"Individual Run Distances by Month\",\n    x = NULL,\n    y = \"\\n \\n \\nRun Distance (Miles) \") +\n  theme(\n    plot.title = element_text(size = 20, hjust = 0.5),\n    axis.title = element_text(size = 15),\n    axis.text = element_text(size = 10, color = \"black\")\n  )\n\n\n\nRun Distance by MonthRun Durations by Month\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#chunk purpose: generate geom_point & geom_line of mile time (y) across 2023, faceted by run distance. Allows viewer to see if mile times for each run distance have improved throughout year. Average mile times should be different for long vs. short runs due to different pacing.\n\n#split data into 4 groups based on run distances (1-3, 4-6, 7-9, 10+ miles) for facet plots. Each set will show 3 faceted plots, 4 sets total generated.\n\n#need 2 data subsets for each of the 4 groups: one for geom_points and one for geom_lines (separate geom_line subsets are needed b/c some distances have only been run once and no line can be drawn between points, returns error)\n\n#first generate discrete distances for subsequent distance groupings\nruns_completed &lt;- runs_completed %&gt;% \n  mutate(mile_rounded = round(distance_miles, 0))\n\n#gen var that labels 1st facet (1 mile) \"mile\" and labels remaining facets of miles 2+ with \"miles\"\nruns_completed &lt;- runs_completed %&gt;% \n  mutate(mile_rounded_label = if_else(\n    mile_rounded == 1, paste(mile_rounded, \"Mile\", sep = \" \"),\n                       paste(mile_rounded, \"Miles\", sep = \" \"))) \n\n#create data subset that excludes discrete run distances that have only occurred once. Subset will be used for geom_lines, which require at least 2 data points\nruns_completed_multiple_miles_subset &lt;- runs_completed %&gt;%\n  group_by(mile_rounded) %&gt;% mutate(n = n()) %&gt;% \n  filter(n &gt; 1)\n\n#split both datasets into 4 groups based on discrete run distances (1-3, 4-6, 7-9, 10+\nruns_completed_sub_1a &lt;- runs_completed %&gt;% \n  filter(mile_rounded &lt;= 3)\n\nruns_completed_sub_1b &lt;- runs_completed_multiple_miles_subset %&gt;% \n  filter(mile_rounded &lt;= 3)\n\nruns_completed_sub_2a &lt;- runs_completed %&gt;% \n  filter(mile_rounded &gt; 3 & mile_rounded &lt;= 6)\n\nruns_completed_sub_2b &lt;- runs_completed_multiple_miles_subset %&gt;% \n  filter(mile_rounded &gt; 3 & mile_rounded &lt;= 6)\n\nruns_completed_sub_3a &lt;- runs_completed %&gt;% \n  filter(mile_rounded &gt; 6 & mile_rounded &lt;= 9)\n\nruns_completed_sub_3b &lt;- runs_completed_multiple_miles_subset %&gt;% \n  filter(mile_rounded &gt; 6 & mile_rounded &lt;= 9)\n\nruns_completed_sub_4a &lt;- runs_completed %&gt;% \n  filter(mile_rounded &gt; 9)\n\nruns_completed_sub_4b &lt;- runs_completed_multiple_miles_subset %&gt;% \n  filter(mile_rounded &gt; 9)\n\n#split \"Paired\" palette into 4 subsections for 4 gg subplots\nsub_1_palette &lt;- c(\"#A6CEE3\", \"#1F78B4\", \"#B2DF8A\")\nsub_2_palette &lt;- c(\"#33A02C\", \"#FB9A99\", \"#E31A1C\")\nsub_3_palette &lt;- c(\"#FDBF6F\", \"#FF7F00\", \"#CAB2D6\")\nsub_4_palette &lt;- c(\"#6A3D9A\", \"#FFFF99\", \"#B15928\")\n\n#write ggplot function that generates a set of ggplots for each of the 4 groups\ngg_facet_repeat &lt;- function(sub_a, sub_b, palette) {\n{{ sub_a }} %&gt;% \n  ggplot(aes(date(datetime), avg_time, color = factor(mile_rounded_label))) +\n  facet_wrap(~mile_rounded_label) +\n  geom_point() +\n  geom_line(data = {{ sub_b }}, aes(date(datetime), avg_time)) +\n  scale_y_time(labels = waiver()) +\n  scale_x_date(date_labels = \"%b\", date_breaks = \"1 month\") +\n  theme_classic() +\n  scale_color_manual(values = {{ palette }}) +\n  labs(\n    title = \"Change in Average Pace Throughout 2023 \\n by Run Distance\",\n    subtitle = \"\\n Paces vary based on planned running distance\",\n    x = NULL,\n    y = \"Average Mile Time\") +\n  theme(\n    plot.title = element_text(size = 20, hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    axis.title = element_text(size = 15),\n    axis.text = element_text(size = 10, color = \"black\"),\n    legend.position = \"bottom\",\n    legend.justification = \"left\",\n    axis.text.x = element_text(angle = 90, vjust = 0.5),\n    panel.grid.major.y = element_line(linewidth = 0.2, linetype = 2, color = \"gray\")\n  ) +\n  guides(color = guide_legend(title = \"Miles Run\"))\n}\n\n#facet miles 1-3\nfacet_1 &lt;- gg_facet_repeat(runs_completed_sub_1a, runs_completed_sub_1b, sub_1_palette)\n\n#facet miles 4-6\nfacet_2 &lt;- gg_facet_repeat(runs_completed_sub_2a, runs_completed_sub_2b, sub_2_palette)\n\n#facet miles 7-9\nfacet_3 &lt;- gg_facet_repeat(runs_completed_sub_3a, runs_completed_sub_3b, sub_3_palette)\n\n#facet miles 10+\nfacet_4 &lt;- gg_facet_repeat(runs_completed_sub_4a, runs_completed_sub_4b, sub_4_palette)\n\nrm(gg_facet_repeat, sub_1_palette, sub_2_palette, sub_3_palette, sub_4_palette, runs_completed_sub_1a, runs_completed_sub_1b, runs_completed_sub_2a, runs_completed_sub_2b, runs_completed_sub_3a, runs_completed_sub_3b, runs_completed_sub_4a, runs_completed_sub_4b, runs_completed_multiple_miles_subset)\n\n\n\n1-3 Mile Pace Trends in 20234-6 Mile Pace Trends in 20237-9 Mile Pace Trends in 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n#make scatterplot of run distance over time, with a unique plot point for the last run\nlast_run_point &lt;- runs_completed %&gt;% \n  slice_head()\n  \nscatter_plot &lt;- runs_completed %&gt;%\n  ggplot(aes(date(datetime), distance_miles)) +\n  geom_jitter(aes(color = distance_miles, alpha = 0.5), shape = 17) +\n  geom_point(\n    data = last_run_point,\n    color = \"black\",\n    fill = \"black\",\n    size = 3,\n    shape = 17\n  ) +\n  geom_text_repel(data = last_run_point, aes(label = \"Last Run\"), vjust = -4) +\n      theme_classic() +\n      theme(\n        plot.title = element_text(size = 20, hjust = 0.5),\n        axis.title = element_text(size = 17),\n        axis.text = element_text(size = 15, color = \"black\")\n      ) +\n      labs(title = \"Run Distance Over Time\\n\", x = \"Months\", y = \"Miles per Run\") +\n      scale_color_gradient(\n        low = \"orange\",\n        high = \"red\",\n        name = \"Distance (Miles)\"\n      ) +\n      scale_x_date(date_labels = \"%b\", date_breaks = \"1 month\") +\n      guides(alpha = \"none\")\n\nscatter_plot"
  },
  {
    "objectID": "running.html#run-destinations-word-cloud",
    "href": "running.html#run-destinations-word-cloud",
    "title": "Seattle Half Marathon Training: November 26, 2023",
    "section": "Run Destinations Word Cloud",
    "text": "Run Destinations Word Cloud\n\n\nCode\nword_cloud &lt;- runs_completed %&gt;%\n  select(destination) %&gt;% \n  group_by(destination) %&gt;% \n  summarize(n = n()) %&gt;% \n  ggplot(aes(label = destination, color = destination, size = n, shape = \"circle\")) +\n  geom_text_wordcloud(shape = \"diamond\") +\n  scale_size_area(max_size = 16) +\n  theme_void()\n\nword_cloud"
  }
]